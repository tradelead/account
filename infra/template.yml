AWSTemplateFormatVersion: '2010-09-09'
Outputs:
  AccountMediaBucket:
    Export:
      Name: !Sub '${AWS::StackName}-AccountMediaBucket'
    Value: !Ref 'AccountMedia'
  UploadCompleteArn:
    Export:
      Name: !Sub '${AWS::StackName}-UploadCompleteArn'
    Value: !GetAtt 'UploadComplete.Arn'
Parameters:
  AwsKmsCmk:
    Type: String
  CoreStack:
    Type: String
  KeycloakClientID:
    Type: String
  KeycloakClientSecret:
    Type: String
  KeycloakRealm:
    Type: String
  KeycloakServerURL:
    Type: String
  MySQLDbName:
    Type: String
  MySQLPass:
    Type: String
  MySQLUser:
    Type: String
  NodeEnv:
    Type: String
Resources:
  AccountMedia:
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - POST
            AllowedOrigins:
              - '*'
    Type: AWS::S3::Bucket
  AccountMediaBucketInvokeUploadComplete:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'UploadComplete'
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt 'AccountMedia.Arn'
    Type: AWS::Lambda::Permission
  GraphQL:
    Properties:
      CodeUri: ../.
      Environment:
        Variables:
          AWS_KMS_CMK: !Ref 'AwsKmsCmk'
          DATABASE_HOST: !ImportValue
            Fn::Sub: ${CoreStack}-MySQL-Address
          DATABASE_NAME: !Ref 'MySQLDbName'
          DATABASE_PASSWORD: !Ref 'MySQLPass'
          DATABASE_POOL_MAX: 2
          DATABASE_POOL_MIN: 1
          DATABASE_PORT: !ImportValue
            Fn::Sub: ${CoreStack}-MySQL-Port
          DATABASE_USER: !Ref 'MySQLUser'
          KEYCLOAK_CLIENT_ID: !Ref 'KeycloakClientID'
          KEYCLOAK_CLIENT_SECRET: !Ref 'KeycloakClientSecret'
          KEYCLOAK_REALM: !Ref 'KeycloakRealm'
          KEYCLOAK_SERVER_URL: !Ref 'KeycloakServerURL'
          NODE_ENV: !Ref 'NodeEnv'
          S3_BUCKET: !Ref 'AccountMedia'
      Events:
        API:
          Properties:
            Method: post
            Path: /graphql
          Type: Api
      Handler: src/lambda/GraphQL.handler
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Action:
                - s3:PutObject
                - s3:GetObject
              Effect: Allow
              Resource: !GetAtt 'AccountMedia.Arn'
            - Action: s3:PutBucketPublicAccessBlock
              Effect: Allow
              Resource: !GetAtt 'AccountMedia.Arn'
          Version: '2012-10-17'
      Runtime: nodejs8.10
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue
            Fn::Sub: ${CoreStack}-RDS-Access-SG-ID
        SubnetIds:
          - !ImportValue
            Fn::Sub: ${CoreStack}-SubnetID
    Type: AWS::Serverless::Function
  UploadComplete:
    Properties:
      CodeUri: ../.
      Environment:
        Variables:
          AWS_KMS_CMK: !Ref 'AwsKmsCmk'
          DATABASE_HOST: !ImportValue
            Fn::Sub: ${CoreStack}-MySQL-Address
          DATABASE_NAME: !Ref 'MySQLDbName'
          DATABASE_PASSWORD: !Ref 'MySQLPass'
          DATABASE_POOL_MAX: 2
          DATABASE_POOL_MIN: 1
          DATABASE_PORT: !ImportValue
            Fn::Sub: ${CoreStack}-MySQL-Port
          DATABASE_USER: !Ref 'MySQLUser'
          KEYCLOAK_CLIENT_ID: !Ref 'KeycloakClientID'
          KEYCLOAK_CLIENT_SECRET: !Ref 'KeycloakClientSecret'
          KEYCLOAK_REALM: !Ref 'KeycloakRealm'
          KEYCLOAK_SERVER_URL: !Ref 'KeycloakServerURL'
          NODE_ENV: !Ref 'NodeEnv'
          S3_BUCKET: !Ref 'AccountMedia'
      Handler: src/lambda/UploadComplete.handler
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Action:
                - s3:PutObject
                - s3:GetObject
              Effect: Allow
              Resource: !GetAtt 'AccountMedia.Arn'
            - Action: s3:PutBucketPublicAccessBlock
              Effect: Allow
              Resource: !GetAtt 'AccountMedia.Arn'
          Version: '2012-10-17'
      Runtime: nodejs8.10
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue
            Fn::Sub: ${CoreStack}-RDS-Access-SG-ID
        SubnetIds:
          - !ImportValue
            Fn::Sub: ${CoreStack}-SubnetID
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
